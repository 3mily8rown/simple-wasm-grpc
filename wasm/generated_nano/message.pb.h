/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_MESSAGE_PB_H_INCLUDED
#define PB_MESSAGE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _MyMessage {
    int32_t id;
    char name[128];
} MyMessage;

typedef struct _Ack {
    bool success;
    char info[64];
} Ack;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define MyMessage_init_default                   {0, ""}
#define Ack_init_default                         {0, ""}
#define MyMessage_init_zero                      {0, ""}
#define Ack_init_zero                            {0, ""}

/* Field tags (for use in manual encoding/decoding) */
#define MyMessage_id_tag                         1
#define MyMessage_name_tag                       2
#define Ack_success_tag                          1
#define Ack_info_tag                             2

/* Struct field encoding specification for nanopb */
#define MyMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    id,                1) \
X(a, STATIC,   SINGULAR, STRING,   name,              2)
#define MyMessage_CALLBACK NULL
#define MyMessage_DEFAULT NULL

#define Ack_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     success,           1) \
X(a, STATIC,   SINGULAR, STRING,   info,              2)
#define Ack_CALLBACK NULL
#define Ack_DEFAULT NULL

extern const pb_msgdesc_t MyMessage_msg;
extern const pb_msgdesc_t Ack_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define MyMessage_fields &MyMessage_msg
#define Ack_fields &Ack_msg

/* Maximum encoded size of messages (where known) */
#define Ack_size                                 67
#define MESSAGE_PB_H_MAX_SIZE                    MyMessage_size
#define MyMessage_size                           141

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
